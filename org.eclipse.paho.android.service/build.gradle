apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 22
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        preDexLibraries = false
    }

    lintOptions {
        abortOnError false
    }
}

repositories {
    maven { url rootProject.ext.mavenUrl }
}
dependencies {
    compile "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${rootProject.ext.clientVersion}"
    compile "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
}

android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc) {
        title = "$name $version API"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar =
                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

}

task("generateSourcesJar", type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task("clearLibraryJar", type: Delete) {
    delete('build/libs/' + rootProject.ext.serviceArchivesBaseName + '-' + rootProject.ext.serviceVersion + '.jar')
}

task("renameLibraryJar", type: Copy, dependsOn: "clearLibraryJar") {
    from('build/intermediates/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename('classes.jar', rootProject.ext.serviceArchivesBaseName + '-' + rootProject.ext.serviceVersion + '.jar')
}

task("generateLibraryJar", type: Jar) {
    from('build/intermediates/classes/release')
}

publishing {
    publications {
        paho(MavenPublication) {
            groupId 'org.eclipse.paho'
            artifact generateSourcesJar
            artifact generateLibraryJar
        }
    }
}

repositories {
    if (project.hasProperty('eclipseRepoUsername')) {
        maven {
            name 'eclipse'
            url 'https://repo.eclipse.org/content/repositories/paho-' + (rootProject.ext.serviceVersion.endsWith('-SNAPSHOT') ? 'snapshots/' : 'releases/')
            credentials {
                username eclipseRepoUsername
                password eclipseRepoPassword
            }
        }
    } else {
        maven {
            url "$buildDir/repo"
        }
    }
}

